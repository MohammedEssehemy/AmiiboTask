{"version":3,"sources":["components/amiibo.js","App.js","actions/getamiiboaction.js","actions/gettotalaction.js","serviceWorker.js","reducers/amiiboreducer.js","reducers/totalreducer.js","index.js","store/configurationstore.js"],"names":["Amiibo","react_default","a","createElement","className","src","this","props","amiibo","image","width","name","Component","App","handleChange","e","target","value","_this","search","getAmiiboCards","axios","get","then","res","data","docs","getTotalCardsNumber","total","catch","err","console","log","type","placeholder","onChange","amiibos","length","map","components_amiibo","key","_id","connect","state","dispatch","cards","arguments","undefined","num","Boolean","window","location","hostname","match","amiibostatedefault","amiiboreducer","action","concat","Object","toConsumableArray","totalreducer","store","createStore","combineReducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75fd9b57.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Amiibo extends Component {\n  render() {\n    return (\n      <div className='card'>\n        <img src={this.props.amiibo.image} width='40%'></img>\n        <p>{this.props.amiibo.name}</p>\n        \n        {/* <p>{this.props.amiibo.amiiboSeries}</p> */}\n        {/* <p>{this.props.amiibo.character}</p> */}\n        {/* <p>{this.props.amiibo.gameSeries}</p> */}\n        \n        \n      </div>\n    );\n  }\n}\n\nexport default Amiibo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Amiibo from './components/amiibo';\nimport { connect } from 'react-redux';\nimport { getAmiiboCards } from './actions/getamiiboaction';\nimport { getTotalCardsNumber } from './actions/gettotalaction'\nimport axios from 'axios';\n\n\nclass App extends Component {\n\n\n  handleChange=(e)=>\n  {\n    if(e.target.value !== '')\n    {\n      this.search(e.target.value);\n    }else\n    {\n      this.getAmiiboCards();\n    }\n    \n  }\n\n  getAmiiboCards=()=>\n  {\n    axios.get('http://localhost:8080/amiibo').then(res=>{\n        this.props.getAmiiboCards(res.data.data.docs);\n        this.props.getTotalCardsNumber(res.data.data.total);\n        \n      }).catch((err)=>{\n        console.log('ERRROR',err);\n      });\n  }\n  \n\n  search=(search)=>\n  {\n    axios.get('http://localhost:8080/amiibo/search?search='+search).then(res=>{     \n         this.props.getAmiiboCards(res.data.data.docs);\n         this.props.getTotalCardsNumber(res.data.data.total)\n      }).catch((err)=>{\n        console.log('ERRROR',err);\n      });\n  }\n\n  componentDidMount(){\n    this.getAmiiboCards();\n  }  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"topnav\">\n          <h3>AMIIBOS</h3>\n            <div className=\"search-container\">\n            <input type=\"text\" placeholder=\"Search..\" name=\"search\" onChange={this.handleChange}/>\n            </div>\n          </div>\n        </header>\n        <div className=\"sidenav\">\n           User Data\n           <h3>Mario</h3>\n           <h4>Total Cards : {this.props.total}</h4>\n           <h4>Visible Cards :{this.props.amiibos.length}</h4>\n        </div>\n        { \n          this.props.amiibos.length === 0 ? <h4>No cards match search </h4> : \n          this.props.amiibos.map(amiibo =>{\n           return <Amiibo key={amiibo._id} amiibo={amiibo}/>\n          })\n        }\n\n        \n      </div>\n    );\n  }\n}\n\nconst mapStateToProps=(state)=>{\n return {\n   amiibos: state.amiibos,\n   total: state.total\n }\n};\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  getAmiiboCards: (cards) => dispatch(getAmiiboCards(cards)),\n  getTotalCardsNumber:(num)=>dispatch(getTotalCardsNumber(num))\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","export const   getAmiiboAction = ({id=0 ,name='none'} ={})=>({\n    type : 'GET_AMIIBO',\n    amiibo:{\n        id ,\n        name\n    }\n });\n\n\n\n export const   getAmiiboCards = (amiiboarray =[])=>({\n    type : 'GET_AMIIBO_CARDS',\n    amiibos:amiiboarray,\n });\n\n\n//  export const   getTotalCardsNumber = (total = 0)=>({\n//     type : 'GET_CARDS_TOTAL',\n//     total:total\n//  });","export const   getTotalCardsNumber = (total = 0)=>({\n    type : 'GET_CARDS_TOTAL',\n    total:total\n });","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst amiibostatedefault = [];\n\nexport default (state = amiibostatedefault,action)=>{\n    switch(action.type)\n    {\n        case 'GET_AMIIBO':\n        return [ ...state,\n            action.amiibo ]\n\n        case 'GET_AMIIBO_CARDS':\n        return action.amiibos \n\n        // case 'GET_CARDS_TOTAL':\n        // {console.log('ACTION',state.amiibos,action.total)\n        // return  action.total \n        // }\n        default:\n        return state\n    }\n    \n};\n\n\n","\nconst amiibostatedefault = [];\n\nexport default (state = amiibostatedefault,action)=>{\n    switch(action.type)\n    {\n        case 'GET_CARDS_TOTAL':\n        return  action.total \n        \n        default:\n        return state\n    }\n    \n};\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport  configureStore  from './store/configurationstore';\n\n\nconst store=configureStore();\n\n\nReactDOM.render(<Provider store={store}> <App /> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nimport { createStore, combineReducers } from 'redux'\nimport amiiboreducer from '../reducers/amiiboreducer';\nimport totalreducer from '../reducers/totalreducer';\n\n\nexport default () =>\n{\n    const store = createStore(combineReducers({\n        amiibos:amiiboreducer,\n        total:totalreducer\n    }), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()  //to add redux dev tool \n    );\n    return store;\n} \n      "],"sourceRoot":""}